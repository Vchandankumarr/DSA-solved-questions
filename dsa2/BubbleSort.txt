## Bubble sort ##
Bubble sort is a simple sorting algorithm that repeatedly steps through a list of elements, compares adjacent elements, and swaps them if they are in the wrong order. The algorithm gets its name from the way smaller elements "bubble" to the top of the list during each pass.

Here's how the bubble sort algorithm works:

1. Start with an unsorted list of elements.
2. Compare the first element with the second element. If the first element is greater than the second element, swap them.
3. Move to the next pair of adjacent elements and repeat the comparison and swapping process.
4. Continue this process until the end of the list is reached.
5. If any swaps were made during a pass through the list, repeat the process from step 1. Otherwise, the list is already sorted, and the algorithm terminates.

The algorithm works by repeatedly moving the largest unsorted element to its correct position in the list. In each pass, the largest element "bubbles up" to the end of the list, similar to how bubbles rise to the surface of a liquid.

Here's an example to illustrate the bubble sort algorithm:

Let's say we have an unsorted list: [5, 3, 8, 2, 1].

Pass 1:
- Compare 5 and 3, swap them: [3, 5, 8, 2, 1].
- Compare 5 and 8, no swap.
- Compare 8 and 2, swap them: [3, 5, 2, 8, 1].
- Compare 8 and 1, swap them: [3, 5, 2, 1, 8].
The largest element, 8, is now in its correct position at the end of the list.

Pass 2:
- Compare 3 and 5, no swap.
- Compare 5 and 2, swap them: [3, 2, 5, 1, 8].
- Compare 5 and 1, swap them: [3, 2, 1, 5, 8].
The second-largest element, 5, is now in its correct position.

Pass 3:
- Compare 3 and 2, swap them: [2, 3, 1, 5, 8].
- Compare 3 and 1, swap them: [2, 1, 3, 5, 8].
The third-largest element, 3, is now in its correct position.

Pass 4:
- Compare 2 and 1, swap them: [1, 2, 3, 5, 8].
The fourth-largest element, 2, is now in its correct position.

The list is now sorted in ascending order: [1, 2, 3, 5, 8].

Bubble sort has a time complexity of O(n^2) in the worst case, where n is the number of elements to be sorted. It is not considered efficient for large lists, but it is easy to understand and implement.